set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

Bundle 'Shougo/vimproc.vim'
Bundle 'Quramy/tsuquyomi'
Bundle 'tpope/vim-fugitive'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
"Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-surround'
Bundle 'vim-scripts/comments.vim'
Bundle 'ervandew/supertab'
Bundle 'vim-scripts/taglist.vim'
Bundle 'vim-scripts/Align'
Bundle 'tmhedberg/matchit'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-repeat'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'tpope/vim-markdown'
"Bundle 'Yggdroot/indentLine'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-ragtag'
"Bundle 'vim-scripts/MatlabFilesEdition'
"Bundle 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'
"Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-endwise'
Bundle 'digitaltoad/vim-jade'
Bundle 'jiangmiao/auto-pairs'
"Bundle 'embear/vim-localvimrc'
Bundle 'vim-scripts/HTML-AutoCloseTag'
Bundle 'ekalinin/Dockerfile.vim'
Bundle 'moll/vim-node'
Bundle 'pangloss/vim-javascript'
Bundle 'groenewege/vim-less'
Bundle 'scrooloose/syntastic'
Bundle 'ntpeters/vim-better-whitespace'
Bundle 'leafgarland/typescript-vim'
Bundle 'blueyed/vim-diminactive'

filetype plugin indent on     " required!
syntax on
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

" ---| TERMINAL-DEPENDANT SETTINGS |--- {{{

" If GUI mode
set termencoding=utf8
colorscheme desert

set t_Co=256
set ttymouse=xterm2
set cursorline

hi CursorLine cterm=none ctermbg=234
if (&term =~ 'rxvt') "Vieux hack rxvt (...)
  so ~/.vim/sitaktif/rxvt.vim
end
"Project

"}}}

" ---| GLOBAL SETTINGS |--- {{{

" Indentation and tabs
"set expandtab
"set tabstop=1

set expandtab
set autoindent "Indent (based on above line) when adding a line
set ts=2 "A tab is 4 spaces
set softtabstop=2 "See 4 spaces per tab
set sw=2 "Indent is 4
"set nosmartindent "Cindent is better

" Editing layout
set formatoptions+=ln "See :h 'formatoptions' :)
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set backspace=start,indent,eol "Fix backspace
set linebreak "Break lines at words, not chars
set so=4 "When moving vertical, start scrolling 4 lines before reaching bottom
set modeline
set listchars+=tab:>·,trail:·,extends:~,nbsp:¤

" Windows
set splitright " Vsplit at right
set previewheight=8 "Height of preview menu (Omni-completion)

" Search
set wrapscan "Continue to top after reaching bottom
"set hlsearch "Highlight search
set incsearch "See results of search step by step

set showmatch "Parenthesis matches
set matchtime=2 "Show new matching parenthesis for 2/10th of sec

"
" System
"set vb t_vb="" "Removes the Fucking Bell Of Death...
set history=1024 "Memorize 1024 last commands
set updatetime=2000 "Update swap (and showmark plugin) every 2 sec

" Mouse
set mouse=r "Use mouse (all)
set ttymouse=xterm2 "Mouse dragging in iTerm

" Command mode options
set wildmenu "Completions view in ex mode (super useful !)
set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc,*.ps,*.pdf,*.cmo,*.cmi,*.cmx "Don't complete bin files
set cmdheight=1 "Command line height

set laststatus=2 "When to show status line (2=always)
set ruler "Show line,col in statusbar
set number "Show lines
set showmode "Show mode in status (insertion, visual...)
set showcmd "Show beginning of normal commands (try d and see at bottom-right)


" Auto-folding and auto-layout (e.g. for vim help files)
set foldenable "Automatic folding
set foldmethod=syntax "Folds automatically between {{{ and }}}
set foldnestmax=2
autocmd! BufReadPost * :if line('$') < 60 | set foldlevel=1000 | endif

"}}}

" ---| MORE COMPLEX FUNCTIONS |--- {{{

" Updates 'Last change:' ; called on every buffer saving
function! TimeStamp()
  let lines = line("$") < 10 ? line("$") : 10
  let pattern1 = '\([Ll]ast [Cc]hange\(s\=\)\(\s\=\):\s\+\)\d\d\d\d \w[a-zé][a-zû] \d\d'
  let replace1 = '\1' . strftime("%Y %b %d")
  execute printf('1,%ds/\C\m%s/%s/e', lines, pattern1, replace1)
  execute printf('$-%d+1,$s/\C\m%s/%s/e', lines, pattern1, replace1)
  let pattern2 = '\($Id: \f\+ \d\+\.\d\+\(\.\d\+\.\d\+\)*\)\(+\(\d\+\)\)\? '
        \ . '\(\d\d\d\d[-/]\d\d[-/]\d\d \d\d:\d\d:\d\d\)\(+\d\d\)\?'
  let replace2 = '\=submatch(1) . "+" . (submatch(4) + 1) . " "'
        \ . '. strftime("%Y\/%m\/%d %H:%M:%S") . submatch(6)'
  execute printf('1,%ds/\C\m%s/%s/e', lines, pattern2, replace2)
  execute printf('$-%d+1,$s/\C\m%s/%s/e', lines, pattern2, replace2)
endfunction

"}}}

" ---| MAPPINGS |--- {{{

"Invert marks : <quote> is easier to type (for AZERTY keyboards)
" map ' `
" Much better :) hope it doesn't crash any plugin
map Y y$
" Next window
map - <c-w>w
map H ^
map L $


" TODO find a useful mapping for Q
map Q A
imap   \<espace insécable\>

" Remove search hilights
map __ :noh<CR>
" correct this shitty typo on exit :]
nmap q: :q

"map ² <ESC>

" Tabs
map <F4> :tabnew<cr>:e 

map <leader>tn :tabnew %<cr>
map <leader>te :tabnew<cr>:e 
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" TODO mapper les fleches sur les fenetres et faire un toggle


" Tags update
map <leader>tu :!ctags -R .<CR><CR>
" Toggle 'preview' in omni-completion
"map <C-F12> :let &completeopt = (&completeopt == "menu" ? "menu,preview" : "menu") <bar> echo &completeopt <cr>
" map <leader>xx :let &completeopt = (&completeopt == "menu" ? "menu,preview" : "menu") <bar> echo &completeopt <cr>

"Preview zone F6/7/8
map <F6> :pop<cr>
map <F7> :tag<cr>
map <F8> :pc<cr>
"Quickfix zone Shift + F6/7/8
map <S-F6> :cp<cr>
map <S-F7> :cn<cr>
map <S-F8> :ccl<cr>

"Mappings for up and down (multilines)
map <S-UP> gk
map <S-DOWN> gj
imap <S-UP> <c-o>gk
imap <S-DOWN> <c-o>gj

"Move a line of text
"imap <C-j> <esc>mz:m+<cr>`za
"imap <C-k> <esc>mz:m-2<cr>`za
"nmap <C-j> mz:m+<cr>`z
"nmap <C-k> mz:m-2<cr>`z
"vmap <C-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <C-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Redefine keys so that the search result is in the middle of the screen
"nmap n nzz
"nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" Fixes a bit Scrolling
nnoremap <PageUp> zz<PageUp>zz
nnoremap <PageDown> zz<PageDown>zz

"Smart mappings on the command line (qwerty & azerty) TODO make more
cno $h e ~/
cno $H e ~/
" cno $j e ./
" cno $J e ./

nmap <Tab> :tabnext<cr>
nmap <S-Tab> :tabprev<cr>
nmap <space> <pagedown>


"}}}

" ---| AUTOCOMMANDS |--- {{{

" ks is an alias for :mark s
autocmd BufWritePre *  silent! undojoin | ks | call TimeStamp()|'s

"}}}

" ---| FILETYPE |--- {{{

" Keyword dictionary complete
autocmd FileType * exec('setlocal dict+='.$VIMRUNTIME.'/syntax/'.expand('<amatch>').'.vim')

set tags=./TAGS,TAGS,./tags,tags

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()


" Javascript
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

" CSS [Works so good :)]
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

" PHP
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" C / C++ (OmniCppComplete)
autocmd FileType c,cpp map <F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" JAVA
" See ftplugin/java.vim
"autocmd FileType java

" HTML
"Jump to end of tag
"autocmd FileType htm,html,htmldjango,xml,xhtml imap <c-l> <esc>l%a

" RUBY
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" Django
autocmd FileType htmldjango imap {% {%  %}<esc>2hi
autocmd FileType htmldjango imap <leader>b <esc>:s/{% block \(.*\) %}/&\r{% endblock \1 %}<cr>:noh<cr>O
autocmd FileType htmldjango imap <leader>e <esc>:s/{% \([a-zA-Z]\+\) \(.*\) %}/&\r{% end\1 \2 %}<cr>:noh<cr>O
cmap ftd set filetype=htmldjango<cr>

" Prototype (js framework) :
"Useful only for azerty
imap $ù $('')<esc>hi

" Mutt (mail client)
au BufRead /tmp/mutt-* set tw=72 spell

"}}}

" ---| INCLUDES |--- {{{

" Options for advanced users
"source $HOME/.vim/sitaktif/adv_vimrc.vim

" Plugin-dependant settings
"source $HOME/.vim/sitaktif/plugin_vimrc.vim

" Autocorrections
"source $HOME/.vim/sitaktif/autocorrect_fr_vimrc.vim

" Vim Outliner plugin
"source $HOME/.vim/sitaktif/vo_vim_outliner.vim

"}}}

" ---| VIM-LATEX |--- {{{
" LaTeX Settings :
let g:tex_conceal = ""
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_ImageDir = '.'
let g:Tex_MultipleCompileFormats='pdf, aux'

"}}}

augroup filetypedetect
  au BufNewFile,BufRead *.pig set filetype=pig syntax=pig
augroup END

" Treat hql (hive) files as if it where standard sql:
au BufNewFile,BufRead *.hql set filetype=sql

" Workaround for slow long lines:
"set synmaxcol=300

let g:localvimrc_sandbox=0
let g:localvimrc_ask=0

"Syntastic
let g:syntastic_aggregate_errors = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_javascript_checkers = ['jshint']
"let g:syntastic_typescript_checkers = []
"let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': [],'passive_filetypes': ['ts']  }
nnoremap <leader>sc :SyntasticCheck<CR>
nnoremap <leader>st :SyntasticToggleMode<CR>

let g:tsuquyomi_single_quote_import=1

highlight ColorColumn ctermbg=235 guibg=#2c2d27

set backupcopy=yes

let g:SuperTabMappingBackward = '<s-c-space>'
autocmd FileType *
  \ if &omnifunc != '' |
  \   call SuperTabChain(&omnifunc, "<c-x><c-o>") |
  \ endif
inoremap <S-Tab> <c-p>
